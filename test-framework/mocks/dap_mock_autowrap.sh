#!/bin/bash
# DAP SDK Mock Auto-Wrapper Generator (Bash version)
# Automatically scans test source files for mock declarations and generates:
# 1. Linker response file with --wrap options
# 2. CMake fragment with configuration
# 3. Wrapper template for missing wrappers
#
# Usage:
#   ./dap_mock_autowrap.sh <test_source.c> [output_dir]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo "============================================================"
    echo "$1"
    echo "============================================================"
}

print_info() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Check arguments
if [ $# -lt 1 ]; then
    echo "Usage: $0 <test_source.c> [output_dir]"
    exit 1
fi

TEST_SOURCE="$1"
OUTPUT_DIR="${2:-$(dirname "$TEST_SOURCE")}"

if [ ! -f "$TEST_SOURCE" ]; then
    print_error "File not found: $TEST_SOURCE"
    exit 1
fi

# Extract base name without extension
BASENAME=$(basename "$TEST_SOURCE" .c)
SOURCE_DIR=$(dirname "$TEST_SOURCE")

# Output files
WRAP_FILE="$OUTPUT_DIR/${BASENAME}_wrap.txt"
CMAKE_FILE="$OUTPUT_DIR/${BASENAME}_mocks.cmake"
TEMPLATE_FILE="$OUTPUT_DIR/${BASENAME}_wrappers_template.c"

print_header "DAP SDK Mock Auto-Wrapper Generator (Bash)"

# Step 1: Scan for mock declarations
print_info "Scanning $TEST_SOURCE for mock declarations..."

# Use grep and sed to extract function names from DAP_MOCK_DECLARE()
MOCK_FUNCTIONS=$(grep -o 'DAP_MOCK_DECLARE\s*(\s*[a-zA-Z_][a-zA-Z0-9_]*\s*)' "$TEST_SOURCE" | \
                 sed 's/DAP_MOCK_DECLARE\s*(\s*\([a-zA-Z_][a-zA-Z0-9_]*\)\s*)/\1/' | \
                 sort -u)

if [ -z "$MOCK_FUNCTIONS" ]; then
    print_warning "No mock declarations found"
    exit 0
fi

FUNC_COUNT=$(echo "$MOCK_FUNCTIONS" | wc -l)
print_success "Found $FUNC_COUNT mock declarations:"
echo "$MOCK_FUNCTIONS" | while read func; do
    echo "   - $func"
done

# Step 2: Scan for existing wrapper definitions
print_info "Scanning for wrapper definitions..."

WRAPPER_FUNCTIONS=$(grep -o 'DAP_MOCK_WRAPPER_[A-Z_]*\s*(\s*[a-zA-Z_][a-zA-Z0-9_]*\s*,' "$TEST_SOURCE" | \
                    sed 's/DAP_MOCK_WRAPPER_[A-Z_]*\s*(\s*\([a-zA-Z_][a-zA-Z0-9_]*\)\s*,/\1/' | \
                    sort -u)

if [ -n "$WRAPPER_FUNCTIONS" ]; then
    echo "$WRAPPER_FUNCTIONS" | while read func; do
        echo "   ‚úÖ $func: wrapper found"
    done
fi

# Step 3: Generate linker response file
print_info "Generating linker response file: $WRAP_FILE"

> "$WRAP_FILE"  # Clear file
echo "$MOCK_FUNCTIONS" | while read func; do
    echo "-Wl,--wrap=$func" >> "$WRAP_FILE"
done

print_success "Generated $FUNC_COUNT --wrap options"

# Step 4: Generate CMake integration
print_info "Generating CMake integration: $CMAKE_FILE"

cat > "$CMAKE_FILE" << EOF
# Auto-generated mock configuration for $BASENAME
# Generated by dap_mock_autowrap.sh

# Linker wrapping options
set(${BASENAME^^}_WRAP_FILE
    \${CMAKE_CURRENT_SOURCE_DIR}/$(basename "$WRAP_FILE")
)

# Read wrap options from file
file(READ \${${BASENAME^^}_WRAP_FILE} ${BASENAME^^}_WRAP_OPTIONS)
string(REPLACE "\\n" ";" ${BASENAME^^}_WRAP_LIST "\${${BASENAME^^}_WRAP_OPTIONS}")

# Apply to test target
target_link_options($BASENAME PRIVATE
    \${${BASENAME^^}_WRAP_LIST}
)

# Wrapped functions (for documentation):
EOF

echo "$MOCK_FUNCTIONS" | while read func; do
    echo "#   - $func" >> "$CMAKE_FILE"
done

print_success "Generated CMake integration"

# Step 5: Find missing wrappers and generate template
if [ -n "$WRAPPER_FUNCTIONS" ]; then
    MISSING_FUNCTIONS=$(comm -23 <(echo "$MOCK_FUNCTIONS" | sort) <(echo "$WRAPPER_FUNCTIONS" | sort))
else
    MISSING_FUNCTIONS="$MOCK_FUNCTIONS"
fi

if [ -z "$MISSING_FUNCTIONS" ]; then
    print_success "All wrappers are defined, no template needed"
else
    MISSING_COUNT=$(echo "$MISSING_FUNCTIONS" | wc -l)
    print_warning "Missing wrappers for $MISSING_COUNT functions"
    print_info "Generating template: $TEMPLATE_FILE"
    
    cat > "$TEMPLATE_FILE" << 'EOF'
// Auto-generated wrapper templates for $TEST_SOURCE
// Copy these to your test file and fill in parameter types

#include "dap_mock_framework.h"
#include "dap_mock_linker_wrapper.h"

EOF
    
    echo "$MISSING_FUNCTIONS" | while read func; do
        cat >> "$TEMPLATE_FILE" << EOF
// TODO: Define wrapper for $func
// Example for int return:
// DAP_MOCK_WRAPPER_INT($func,
//     (type1 a_param1, type2 a_param2),
//     (a_param1, a_param2))
//
// Example for pointer return:
// DAP_MOCK_WRAPPER_PTR($func,
//     (type1 a_param1),
//     (a_param1))
//
// Example for void:
// DAP_MOCK_WRAPPER_VOID_FUNC($func,
//     (type1 a_param1),
//     (a_param1))

EOF
    done
    
    print_success "Template generated with $MISSING_COUNT function stubs"
    echo "$MISSING_FUNCTIONS" | while read func; do
        echo "   ‚ö†Ô∏è  $func"
    done
fi

# Summary
print_header "‚úÖ Generation Complete!"

echo ""
echo "Generated files:"
echo "  üìÑ $WRAP_FILE"
echo "  üìÑ $CMAKE_FILE"
if [ -n "$MISSING_FUNCTIONS" ]; then
    echo "  üìÑ $TEMPLATE_FILE"
fi

echo ""
echo "To use in CMakeLists.txt:"
echo "  include($(basename "$CMAKE_FILE"))"
echo ""
echo "Or use CMake function:"
echo "  dap_mock_wrap_from_file($BASENAME $(basename "$WRAP_FILE"))"

