{
  "metadata": {
    "version": "1.0",
    "source": "dap_sdk_coding_guidelines.md",
    "type": "coding_standards"
  },
  "naming_conventions": {
    "functions": {
      "prefix": "dap_",
      "style": "snake_case",
      "examples": [
        "dap_common_init()",
        "dap_config_get()"
      ]
    },
    "variables": {
      "prefixes": {
        "local": "l_",
        "argument": "a_",
        "static": "s_",
        "global": "g_"
      },
      "style": "snake_case",
      "examples": [
        "l_buffer_size",
        "a_config_path"
      ]
    },
    "macros": {
      "prefix": "DAP_",
      "style": "UPPER_CASE",
      "examples": [
        "DAP_NEW",
        "DAP_DELETE",
        "DAP_MALLOC"
      ]
    },
    "types": {
      "suffix": "_t",
      "style": "snake_case",
      "examples": [
        "dap_config_t",
        "dap_chain_t"
      ]
    }
  },
  "memory_management": {
    "allocation": {
      "preferred": [
        "DAP_NEW",
        "DAP_NEW_Z",
        "DAP_MALLOC",
        "DAP_CALLOC"
      ],
      "avoid": [
        "malloc",
        "calloc",
        "new"
      ],
      "always_check": true,
      "pattern": "if (!ptr) { log_it(L_CRITICAL, \"%s\", c_error_memory_alloc); return -ENOMEM; }"
    },
    "deallocation": {
      "preferred": [
        "DAP_DELETE",
        "DAP_FREE"
      ],
      "avoid": [
        "free",
        "delete"
      ],
      "null_after_free": true
    }
  },
  "logging": {
    "function": "log_it",
    "levels": {
      "L_DEBUG": "Detailed debugging information",
      "L_INFO": "General information",
      "L_NOTICE": "Normal but significant events",
      "L_MSG": "User-level messages",
      "L_DAP": "DAP-specific events",
      "L_WARNING": "Warning conditions",
      "L_ATT": "Attention-requiring events",
      "L_ERROR": "Error conditions",
      "L_CRITICAL": "Critical conditions"
    },
    "log_tag_required": true,
    "pattern": "#define LOG_TAG \"module_name\""
  },
  "error_handling": {
    "return_codes": {
      "success": 0,
      "memory_error": "-ENOMEM",
      "invalid_param": "-EINVAL",
      "not_found": "-ENOENT"
    },
    "pattern": "Always check return values and handle errors gracefully"
  },
  "includes": {
    "required": [
      "dap_common.h"
    ],
    "order": [
      "system headers",
      "dap headers",
      "local headers"
    ],
    "style": "Use quotes for local, brackets for system"
  },
  "code_style": {
    "indentation": "4 spaces",
    "braces": "K&R style",
    "line_length": "120 characters max",
    "comments": "Use /* */ for block, // for inline"
  }
}