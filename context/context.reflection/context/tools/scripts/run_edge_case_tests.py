#!/usr/bin/env python3
"""
Edge Case Testing Suite –¥–ª—è Template System
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ error conditions
"""

import json
import os
import time
import tempfile
import subprocess
from pathlib import Path
from typing import Dict, List, Any
import concurrent.futures
from dataclasses import dataclass

@dataclass
class EdgeCaseResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç edge case —Ç–µ—Å—Ç–∞"""
    test_name: str
    status: str  # "PASS", "FAIL", "ERROR"
    description: str
    expected_behavior: str
    actual_behavior: str
    execution_time: float

class EdgeCaseTester:
    """Comprehensive edge case testing"""
    
    def __init__(self, context_root: str):
        self.context_root = Path(context_root)
        self.results: List[EdgeCaseResult] = []
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö edge case tests"""
        print("üß™ –ó–∞–ø—É—Å–∫ Edge Case Testing Suite...")
        
        test_methods = [
            self._test_malformed_json,
            self._test_missing_required_fields,
            self._test_empty_templates,
            self._test_large_templates,
            self._test_concurrent_access,
            self._test_resource_constraints,
            self._test_broken_workflows,
            self._test_circular_dependencies,
            self._test_invalid_cross_references,
            self._test_unicode_handling
        ]
        
        for test_method in test_methods:
            try:
                test_method()
            except Exception as e:
                self.results.append(EdgeCaseResult(
                    test_name=test_method.__name__,
                    status="ERROR",
                    description="Test execution failed",
                    expected_behavior="Test should run without throwing exception",
                    actual_behavior=f"Exception: {e}",
                    execution_time=0.0
                ))
        
        self._generate_report()
        return all(result.status in ["PASS", "WARNING"] for result in self.results)
    
    def _test_malformed_json(self):
        """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON"""
        print("  üîç Testing malformed JSON handling...")
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            f.write('{"type": "test", "invalid": json}')  # –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
            temp_file = f.name
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON
            with open(temp_file, 'r') as f:
                json.load(f)
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, JSON –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
            actual = "JSON –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫"
            status = "FAIL"
        
        except json.JSONDecodeError:
            # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - JSON decoder –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É
            actual = "JSON decoder –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–æ—Å–∏–ª JSONDecodeError"
            status = "PASS"
        
        except Exception as e:
            actual = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            status = "FAIL"
        
        finally:
            os.unlink(temp_file)
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="malformed_json_handling",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON",
            expected_behavior="JSON decoder –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å JSONDecodeError",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _test_missing_required_fields(self):
        """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        print("  üîç Testing missing required fields...")
        
        start_time = time.time()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º template –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        incomplete_template = {
            "description": "Template –±–µ–∑ required fields"
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: type, version
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        missing_fields = []
        if 'type' not in incomplete_template:
            missing_fields.append('type')
        if 'version' not in incomplete_template:
            missing_fields.append('version')
        
        if missing_fields:
            status = "PASS"
            actual = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {missing_fields}"
        else:
            status = "FAIL"
            actual = "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è"
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="missing_required_fields",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π",
            expected_behavior="–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _test_empty_templates(self):
        """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö templates"""
        print("  üîç Testing empty template handling...")
        
        start_time = time.time()
        
        empty_cases = [
            {},  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç–æ–π
            {"type": ""},  # –ü—É—Å—Ç–æ–π type
            {"type": "test", "content": ""},  # –ü—É—Å—Ç–æ–π content
            {"type": "test", "content": None}  # Null content
        ]
        
        issues_found = 0
        for i, empty_case in enumerate(empty_cases):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—É—Å—Ç–æ–≥–æ template
            if not empty_case or not empty_case.get('type') or not empty_case.get('content'):
                issues_found += 1
        
        if issues_found == len(empty_cases):
            status = "PASS"
            actual = f"–í—Å–µ {issues_found} –ø—É—Å—Ç—ã—Ö cases –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        else:
            status = "FAIL"
            actual = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ {issues_found} –∏–∑ {len(empty_cases)} –ø—É—Å—Ç—ã—Ö cases"
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="empty_template_handling",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö templates",
            expected_behavior="–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ inputs",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _test_large_templates(self):
        """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö templates"""
        print("  üîç Testing large template handling...")
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π template
        large_template = {
            "type": "large_test",
            "version": "1.0",
            "large_content": "x" * 1000000,  # 1MB —Å—Ç—Ä–æ–∫–∞
            "large_array": list(range(10000)),  # –ë–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤
            "nested_structure": {
                f"key_{i}": f"value_{i}" * 100 for i in range(1000)
            }
        }
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–æ–π template
            json_str = json.dumps(large_template)
            parsed = json.loads(json_str)
            
            if len(json_str) > 500000:  # –ë–æ–ª—å—à–µ 500KB
                status = "PASS"
                actual = f"–ë–æ–ª—å—à–æ–π template —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Ä–∞–∑–º–µ—Ä: {len(json_str)} bytes)"
            else:
                status = "FAIL"
                actual = "Template –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –¥–ª—è —Ç–µ—Å—Ç–∞"
        
        except Exception as e:
            status = "FAIL"
            actual = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ template: {e}"
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="large_template_handling",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö templates",
            expected_behavior="–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _test_concurrent_access(self):
        """–¢–µ—Å—Ç: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ templates"""
        print("  üîç Testing concurrent access...")
        
        start_time = time.time()
        
        def simulate_template_access(thread_id):
            """–°–∏–º—É–ª—è—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ template"""
            time.sleep(0.1)  # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
            return f"thread_{thread_id}_completed"
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
                futures = [executor.submit(simulate_template_access, i) for i in range(10)]
                results = [future.result() for future in concurrent.futures.as_completed(futures)]
            
            if len(results) == 10:
                status = "PASS"
                actual = f"–í—Å–µ {len(results)} concurrent operations –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
            else:
                status = "FAIL"
                actual = f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(results)} –∏–∑ 10 operations"
        
        except Exception as e:
            status = "FAIL"
            actual = f"–û—à–∏–±–∫–∞ concurrent access: {e}"
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="concurrent_access",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ templates",
            expected_behavior="–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å concurrent access",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _test_resource_constraints(self):
        """–¢–µ—Å—Ç: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö"""
        print("  üîç Testing resource constraints...")
        
        start_time = time.time()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
        try:
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ memory pressure
            memory_consumers = []
            for i in range(1000):
                memory_consumers.append([0] * 1000)  # 1000 integers each
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å normal operation –ø—Ä–∏ memory pressure
            test_template = {"type": "memory_test", "data": list(range(100))}
            json_str = json.dumps(test_template)
            
            status = "PASS"
            actual = "Template operations —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∏ memory pressure"
        
        except MemoryError:
            status = "PASS"  # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ memory constraints
            actual = "MemoryError –ø—Ä–∞–≤–∏–ª—å–Ω–æ raised –ø—Ä–∏ memory constraints"
        
        except Exception as e:
            status = "FAIL"
            actual = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="resource_constraints",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö",
            expected_behavior="–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ gracefully handle resource constraints",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _test_broken_workflows(self):
        """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö workflows"""
        print("  üîç Testing broken workflow handling...")
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º workflow —Å broken steps
        broken_workflow = {
            "workflow_patterns": {
                "broken_pattern": {
                    "trigger": {"keywords": ["test"]},
                    "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å": [
                        {"—à–∞–±–ª–æ–Ω": "NonExistentTemplate"},  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π template
                        {"–æ–ø–∏—Å–∞–Ω–∏–µ": "Step without template"},  # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω
                        {}  # –ü—É—Å—Ç–æ–π step
                    ]
                }
            }
        }
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º broken workflow
        issues = []
        pattern = broken_workflow["workflow_patterns"]["broken_pattern"]
        sequence = pattern["—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]
        
        for i, step in enumerate(sequence):
            if "—à–∞–±–ª–æ–Ω" not in step:
                issues.append(f"Step {i} missing template")
            elif step.get("—à–∞–±–ª–æ–Ω") == "NonExistentTemplate":
                issues.append(f"Step {i} references non-existent template")
            if not step:
                issues.append(f"Step {i} is empty")
        
        if len(issues) >= 3:  # –û–∂–∏–¥–∞–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ 3 –ø—Ä–æ–±–ª–µ–º—ã
            status = "PASS"
            actual = f"–í—Å–µ {len(issues)} –ø—Ä–æ–±–ª–µ–º—ã –≤ workflow –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        else:
            status = "FAIL"
            actual = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º –∏–∑ 3"
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="broken_workflow_handling",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö workflows",
            expected_behavior="–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å broken workflow steps",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _test_circular_dependencies(self):
        """–¢–µ—Å—Ç: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("  üîç Testing circular dependency detection...")
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        dependencies = {
            "Template_A": ["Template_B"],
            "Template_B": ["Template_C"], 
            "Template_C": ["Template_A"]  # –¶–∏–∫–ª: A -> B -> C -> A
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
        def has_cycle(deps, start, visited=None, path=None):
            if visited is None:
                visited = set()
            if path is None:
                path = []
            
            if start in path:
                return True  # –¶–∏–∫–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω
            
            if start in visited:
                return False
            
            visited.add(start)
            path.append(start)
            
            for dep in deps.get(start, []):
                if has_cycle(deps, dep, visited, path):
                    return True
            
            path.remove(start)
            return False
        
        cycle_detected = has_cycle(dependencies, "Template_A")
        
        if cycle_detected:
            status = "PASS"
            actual = "–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        else:
            status = "FAIL"
            actual = "–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="circular_dependency_detection",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
            expected_behavior="–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _test_invalid_cross_references(self):
        """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö cross-references"""
        print("  üîç Testing invalid cross-reference handling...")
        
        start_time = time.time()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º template —Å invalid references
        template_with_refs = {
            "type": "test_template",
            "references": [
                "ValidTemplate",
                "NonExistentTemplate",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                "",  # –ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞
                None  # Null reference
            ]
        }
        
        # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö templates
        existing_templates = {"ValidTemplate", "AnotherTemplate"}
        
        invalid_refs = []
        for ref in template_with_refs["references"]:
            if not ref or ref not in existing_templates:
                invalid_refs.append(ref)
        
        if len(invalid_refs) >= 2:  # –û–∂–∏–¥–∞–µ–º –Ω–∞–π—Ç–∏ 2+ invalid references
            status = "PASS"
            actual = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(invalid_refs)} invalid references"
        else:
            status = "FAIL"
            actual = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(invalid_refs)} invalid references"
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="invalid_cross_references",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö cross-references",
            expected_behavior="–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å invalid cross-references",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _test_unicode_handling(self):
        """–¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ Unicode —Å–∏–º–≤–æ–ª–æ–≤"""
        print("  üîç Testing Unicode handling...")
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º template —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ Unicode —Å–∏–º–≤–æ–ª–∞–º–∏
        unicode_template = {
            "type": "unicode_test",
            "–Ω–∞–∑–≤–∞–Ω–∏—è": "–¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω",  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
            "description": "Test with √©mojis üöÄüî•üí° and sp√´cial chars",  # Emoji + —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "chinese": "ÊµãËØï‰∏≠ÊñáÂ≠óÁ¨¶",  # –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            "arabic": "ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",  # –ê—Ä–∞–±—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            "special_chars": "¬´quotes¬ª ‚Äîdash‚Äî ‚Ä¶ellipsis‚Ä¶"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        }
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å Unicode content
            json_str = json.dumps(unicode_template, ensure_ascii=False)
            parsed = json.loads(json_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            if (parsed["–Ω–∞–∑–≤–∞–Ω–∏—è"] == unicode_template["–Ω–∞–∑–≤–∞–Ω–∏—è"] and 
                "üöÄ" in parsed["description"] and
                parsed["chinese"] == unicode_template["chinese"]):
                status = "PASS"
                actual = "Unicode —Å–∏–º–≤–æ–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            else:
                status = "FAIL"
                actual = "Unicode —Å–∏–º–≤–æ–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        
        except Exception as e:
            status = "FAIL"
            actual = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode: {e}"
        
        execution_time = time.time() - start_time
        
        self.results.append(EdgeCaseResult(
            test_name="unicode_handling",
            status=status,
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode —Å–∏–º–≤–æ–ª–æ–≤",
            expected_behavior="–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ Unicode —Å–∏–º–≤–æ–ª—ã",
            actual_behavior=actual,
            execution_time=execution_time
        ))
    
    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ edge case testing"""
        print("\n" + "="*60)
        print("üß™ EDGE CASE TESTING REPORT")
        print("="*60)
        
        total_tests = len(self.results)
        passed = sum(1 for r in self.results if r.status == "PASS")
        failed = sum(1 for r in self.results if r.status == "FAIL")
        errors = sum(1 for r in self.results if r.status == "ERROR")
        
        print(f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"  ‚úÖ –ü—Ä–æ—à–ª–∏: {passed}")
        print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã: {failed}")
        print(f"  üö´ –û—à–∏–±–∫–∏: {errors}")
        print(f"  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total_tests*100):.1f}%")
        
        if failed > 0 or errors > 0:
            print(f"\n‚ùå FAILED/ERROR TESTS:")
            for result in self.results:
                if result.status in ["FAIL", "ERROR"]:
                    print(f"  {result.test_name}:")
                    print(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {result.description}")
                    print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {result.expected_behavior}")
                    print(f"    –ü–æ–ª—É—á–µ–Ω–æ: {result.actual_behavior}")
        
        print(f"\nüìã DETAILED RESULTS:")
        for result in self.results:
            status_icon = {"PASS": "‚úÖ", "FAIL": "‚ùå", "ERROR": "üö´"}[result.status]
            print(f"  {status_icon} {result.test_name} ({result.execution_time:.3f}s)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        context_root = sys.argv[1]
    else:
        context_root = "context/context.reflection/context"
    
    tester = EdgeCaseTester(context_root)
    success = tester.run_all_tests()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 