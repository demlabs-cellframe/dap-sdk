#!/usr/bin/env python3
"""
Comprehensive Template Validation Suite
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö templates –≤ SLC —Å–∏—Å—Ç–µ–º–µ
"""

import json
import os
import sys
import subprocess
import re
from pathlib import Path
from typing import Dict, List, Tuple, Any
import time
from dataclasses import dataclass

@dataclass
class ValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ template"""
    template_name: str
    status: str  # "PASS", "FAIL", "WARNING"
    issues: List[str]
    execution_time: float
    details: Dict[str, Any]

class TemplateValidator:
    """Comprehensive validator –¥–ª—è –≤—Å–µ—Ö templates"""
    
    def __init__(self, context_root: str):
        self.context_root = Path(context_root)
        self.results: List[ValidationResult] = []
        self.stats = {
            "total_templates": 0,
            "passed": 0,
            "failed": 0,
            "warnings": 0,
            "total_time": 0
        }
    
    def validate_all(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö templates"""
        print("üîç –ó–∞–ø—É—Å–∫ Comprehensive Template Validation Suite...")
        
        start_time = time.time()
        
        # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        self._validate_json_structure()
        self._validate_markdown_structure() 
        self._validate_cross_references()
        
        # 2. –°–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        self._validate_workflow_completeness()
        self._validate_examples()
        self._validate_dependencies()
        
        # 3. Performance testing
        self._validate_performance()
        
        # 4. Edge case testing
        self._run_edge_case_tests()
        
        self.stats["total_time"] = time.time() - start_time
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self._generate_report()
        
        return self.stats["failed"] == 0
    
    def _validate_json_structure(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Å–µ—Ö templates"""
        print("üìã –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        
        json_files = list(self.context_root.rglob("*.json"))
        
        for json_file in json_files:
            start_time = time.time()
            issues = []
            
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if 'type' not in data:
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'type'")
                
                if 'version' not in data:
                    issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'version'")
                
                # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è different types
                if data.get('type') == 'universal_template_module':
                    self._validate_template_module(data, issues)
                elif data.get('type') == 'workflow_recommendation_engine':
                    self._validate_workflow_engine(data, issues)
                
            except json.JSONDecodeError as e:
                issues.append(f"JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            except Exception as e:
                issues.append(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            
            execution_time = time.time() - start_time
            status = "FAIL" if issues else "PASS"
            
            result = ValidationResult(
                template_name=str(json_file.relative_to(self.context_root)),
                status=status,
                issues=issues,
                execution_time=execution_time,
                details={"file_type": "json", "size": json_file.stat().st_size}
            )
            
            self.results.append(result)
            self._update_stats(status)
    
    def _validate_template_module(self, data: Dict, issues: List[str]):
        """–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è template modules"""
        required_fields = ['template_info', '–æ—Å–Ω–æ–≤–Ω—ã–µ_–ø—Ä–∏–Ω—Ü–∏–ø—ã']
        
        for field in required_fields:
            if field not in data:
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}' –¥–ª—è template module")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ template_info —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if 'template_info' in data:
            template_info = data['template_info']
            if 'name' not in template_info:
                issues.append("template_info –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'name'")
            if 'description' not in template_info:
                issues.append("template_info –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'description'")
    
    def _validate_workflow_engine(self, data: Dict, issues: List[str]):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è workflow recommendation engine"""
        required_sections = ['workflow_patterns', '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è']
        
        for section in required_sections:
            if section not in data:
                issues.append(f"Workflow engine –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '{section}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ workflow patterns
        if 'workflow_patterns' in data:
            for pattern_name, pattern_data in data['workflow_patterns'].items():
                if 'trigger' not in pattern_data:
                    issues.append(f"Workflow pattern '{pattern_name}' –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'trigger'")
                if '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' not in pattern_data:
                    issues.append(f"Workflow pattern '{pattern_name}' –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    
    def _validate_markdown_structure(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Markdown —Ñ–∞–π–ª–æ–≤"""
        print("üìù –í–∞–ª–∏–¥–∞—Ü–∏—è Markdown —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        
        md_files = list(self.context_root.rglob("*.md"))
        
        for md_file in md_files:
            start_time = time.time()
            issues = []
            
            try:
                with open(md_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                if not content.startswith('#'):
                    issues.append("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ broken links (basic check)
                links = re.findall(r'\[([^\]]+)\]\(([^)]+)\)', content)
                for link_text, link_url in links:
                    if link_url.startswith('http'):
                        continue  # Skip external links for now
                    
                    # Check internal links
                    if not link_url.startswith('#'):  # Not an anchor
                        link_path = md_file.parent / link_url
                        if not link_path.exists():
                            issues.append(f"Broken internal link: {link_url}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                headers = re.findall(r'^(#+)\s+(.+)$', content, re.MULTILINE)
                if headers:
                    prev_level = 0
                    for header_markup, header_text in headers:
                        level = len(header_markup)
                        if level > prev_level + 1:
                            issues.append(f"–ü—Ä–æ–ø—É—â–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ '{header_text}'")
                        prev_level = level
                
            except Exception as e:
                issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
            execution_time = time.time() - start_time
            status = "FAIL" if issues else "PASS"
            
            result = ValidationResult(
                template_name=str(md_file.relative_to(self.context_root)),
                status=status,
                issues=issues,
                execution_time=execution_time,
                details={"file_type": "markdown", "size": md_file.stat().st_size}
            )
            
            self.results.append(result)
            self._update_stats(status)
    
    def _validate_cross_references(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cross-references –º–µ–∂–¥—É templates"""
        print("üîó –í–∞–ª–∏–¥–∞—Ü–∏—è cross-references...")
        
        # Collect all template references
        all_templates = set()
        references = {}
        
        # Scan all files for template references
        for file_path in self.context_root.rglob("*"):
            if file_path.is_file() and file_path.suffix in ['.json', '.md']:
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Extract template names mentioned
                    template_mentions = re.findall(r'([A-Z][a-zA-Z\s]+(?:Enhanced|Optimization|Documentation|Matrix|Engine))', content)
                    
                    if template_mentions:
                        references[str(file_path.relative_to(self.context_root))] = template_mentions
                
                except Exception:
                    continue
        
        # Check for broken references (simplified check)
        issues = []
        known_templates = {
            "C Development Enhanced",
            "Live Documentation", 
            "Universal Optimization",
            "Cross-Domain Matrix",
            "Workflow Recommendation Engine"
        }
        
        for file_path, mentions in references.items():
            for mention in mentions:
                if mention not in known_templates and "template" in mention.lower():
                    issues.append(f"–í–æ–∑–º–æ–∂–Ω–∞—è broken reference –≤ {file_path}: {mention}")
        
        result = ValidationResult(
            template_name="cross_references",
            status="FAIL" if issues else "PASS",
            issues=issues,
            execution_time=0.1,
            details={"references_checked": len(references)}
        )
        
        self.results.append(result)
        self._update_stats(result.status)
    
    def _validate_workflow_completeness(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ completeness workflow patterns"""
        print("üîÑ –í–∞–ª–∏–¥–∞—Ü–∏—è workflow completeness...")
        
        workflow_file = self.context_root / "tools" / "workflow_recommendation_engine.json"
        issues = []
        
        if not workflow_file.exists():
            issues.append("Workflow recommendation engine file –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            try:
                with open(workflow_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                patterns = data.get('workflow_patterns', {})
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ pattern –Ω–∞ completeness
                for pattern_name, pattern_data in patterns.items():
                    if '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' not in pattern_data:
                        issues.append(f"Pattern {pattern_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                        continue
                    
                    sequence = pattern_data['—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è_–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å']
                    for step in sequence:
                        if '—à–∞–±–ª–æ–Ω' not in step:
                            issues.append(f"Step –≤ {pattern_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–±–ª–æ–Ω")
                        if '–æ–ø–∏—Å–∞–Ω–∏–µ' not in step:
                            issues.append(f"Step –≤ {pattern_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ")
                
            except Exception as e:
                issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è workflow file: {e}")
        
        result = ValidationResult(
            template_name="workflow_completeness",
            status="FAIL" if issues else "PASS",
            issues=issues,
            execution_time=0.1,
            details={"patterns_checked": len(patterns) if 'patterns' in locals() else 0}
        )
        
        self.results.append(result)
        self._update_stats(result.status)
    
    def _validate_examples(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ templates"""
        print("üí° –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤...")
        
        # This would normally compile/test code examples
        # For now, just check that examples exist
        issues = []
        
        # Check C Development Enhanced template for examples
        c_dev_files = list(self.context_root.rglob("*c_development*"))
        
        example_count = 0
        for file_path in c_dev_files:
            if file_path.is_file():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Count code blocks
                    code_blocks = re.findall(r'```[a-zA-Z]*\n(.*?)\n```', content, re.DOTALL)
                    example_count += len(code_blocks)
                
                except Exception:
                    continue
        
        if example_count == 0:
            issues.append("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞ –≤ templates")
        
        result = ValidationResult(
            template_name="examples_validation",
            status="WARNING" if issues else "PASS",
            issues=issues,
            execution_time=0.1,
            details={"examples_found": example_count}
        )
        
        self.results.append(result)
        self._update_stats(result.status)
    
    def _validate_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ dependencies –º–µ–∂–¥—É templates"""
        print("üîó –í–∞–ª–∏–¥–∞—Ü–∏—è dependencies...")
        
        # Check navigation matrix for consistency
        matrix_file = self.context_root / "docs" / "–º–∞—Ç—Ä–∏—Ü–∞_–≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏_—à–∞–±–ª–æ–Ω–æ–≤.md"
        issues = []
        
        if not matrix_file.exists():
            issues.append("Template interconnection matrix –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            try:
                with open(matrix_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Basic check for workflow patterns
                if "Pattern 1:" not in content:
                    issues.append("–ù–µ –Ω–∞–π–¥–µ–Ω—ã workflow patterns –≤ matrix")
                
                if "Navigation Hints" not in content and "–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –ü–æ–¥—Å–∫–∞–∑–∫–∏" not in content:
                    issues.append("–ù–µ –Ω–∞–π–¥–µ–Ω—ã navigation hints –≤ matrix")
                
            except Exception as e:
                issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è matrix file: {e}")
        
        result = ValidationResult(
            template_name="dependencies_validation",
            status="FAIL" if issues else "PASS",
            issues=issues,
            execution_time=0.1,
            details={"matrix_exists": matrix_file.exists()}
        )
        
        self.results.append(result)
        self._update_stats(result.status)
    
    def _validate_performance(self):
        """Performance testing templates"""
        print("‚ö° Performance testing...")
        
        issues = []
        start_time = time.time()
        
        # Simulate template loading performance
        json_files = list(self.context_root.rglob("*.json"))
        
        total_load_time = 0
        for json_file in json_files:
            file_start = time.time()
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    json.load(f)
                file_load_time = time.time() - file_start
                total_load_time += file_load_time
                
                # Check if any file takes too long
                if file_load_time > 0.5:  # 500ms threshold
                    issues.append(f"Slow loading file: {json_file.name} ({file_load_time:.2f}s)")
                    
            except Exception as e:
                issues.append(f"Load error {json_file.name}: {e}")
        
        execution_time = time.time() - start_time
        
        result = ValidationResult(
            template_name="performance_test",
            status="WARNING" if issues else "PASS",
            issues=issues,
            execution_time=execution_time,
            details={
                "total_files": len(json_files),
                "total_load_time": total_load_time,
                "average_load_time": total_load_time / len(json_files) if json_files else 0
            }
        )
        
        self.results.append(result)
        self._update_stats(result.status)
    
    def _run_edge_case_tests(self):
        """Edge case testing"""
        print("üß™ Edge case testing...")
        
        issues = []
        
        # Test 1: Empty inputs handling
        try:
            # Simulate template with missing required fields
            empty_template = {}
            # This would normally test template generation with empty input
            # For now, just flag that edge case testing is needed
            issues.append("Edge case testing implementation needed")
        except Exception:
            pass
        
        # Test 2: Large input handling
        # Test 3: Concurrent access
        # Test 4: Resource constraints
        
        result = ValidationResult(
            template_name="edge_case_tests",
            status="WARNING",  # Always warning since implementation is pending
            issues=issues,
            execution_time=0.1,
            details={"test_cases_planned": 4, "implemented": 0}
        )
        
        self.results.append(result)
        self._update_stats(result.status)
    
    def _update_stats(self, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats["total_templates"] += 1
        if status == "PASS":
            self.stats["passed"] += 1
        elif status == "FAIL":
            self.stats["failed"] += 1
        else:  # WARNING
            self.stats["warnings"] += 1
    
    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("\n" + "="*60)
        print("üìä COMPREHENSIVE TEMPLATE VALIDATION REPORT")
        print("="*60)
        
        print(f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.stats['total_templates']}")
        print(f"  ‚úÖ –ü—Ä–æ—à–ª–∏: {self.stats['passed']}")
        print(f"  ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {self.stats['warnings']}")
        print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã: {self.stats['failed']}")
        print(f"  üïê –û–±—â–µ–µ –≤—Ä–µ–º—è: {self.stats['total_time']:.2f}s")
        
        if self.stats['failed'] > 0:
            print(f"\n‚ùå FAILED VALIDATIONS:")
            for result in self.results:
                if result.status == "FAIL":
                    print(f"  {result.template_name}:")
                    for issue in result.issues:
                        print(f"    - {issue}")
        
        if self.stats['warnings'] > 0:
            print(f"\n‚ö†Ô∏è  WARNINGS:")
            for result in self.results:
                if result.status == "WARNING":
                    print(f"  {result.template_name}:")
                    for issue in result.issues:
                        print(f"    - {issue}")
        
        print(f"\nüéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.stats['passed'] / self.stats['total_templates'] * 100):.1f}%")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if self.stats['failed'] > 0:
            print("  - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
        if self.stats['warnings'] > 0:
            print("  - –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")
        if self.stats['passed'] == self.stats['total_templates']:
            print("  - –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        context_root = sys.argv[1]
    else:
        context_root = "context/context.reflection/context"
    
    if not os.path.exists(context_root):
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {context_root} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        sys.exit(1)
    
    validator = TemplateValidator(context_root)
    success = validator.validate_all()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main() 