#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ DAP SDK –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü—É—Ç–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SERVER_SCRIPT="$SCRIPT_DIR/run_server.py"
PID_FILE="$SCRIPT_DIR/mcp_server.pid"
LOG_FILE="$SCRIPT_DIR/mcp_server.log"
PYTHONPATH="/home/naeper/.local/share/pipx/venvs/mcp/lib/python3.13/site-packages:$SCRIPT_DIR"

# –§—É–Ω–∫—Ü–∏–∏
show_usage() {
    echo -e "${BLUE}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "  $0 start [path]  - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å –ø—É—Ç–µ–º –∫ –ø—Ä–æ–µ–∫—Ç—É)"
    echo "  $0 stop          - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo "  $0 restart [path]- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo "  $0 status        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  $0 logs          - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    echo "  $0 test          - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
    echo ""
    echo -e "${BLUE}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
    echo "  $0 start"
    echo "  $0 start /path/to/dap-sdk"
    echo "  $0 status"
    echo "  $0 logs"
}

is_server_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0
        else
            # PID —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω
            rm -f "$PID_FILE"
            return 1
        fi
    fi
    return 1
}

start_server() {
    local project_path="${1:-/home/naeper/work/cellframe-node/dap-sdk}"
    
    if is_server_running; then
        echo -e "${YELLOW}‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $(cat "$PID_FILE"))${NC}"
        return 1
    fi

    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ DAP SDK...${NC}"
    echo -e "${BLUE}üìÅ –ü—Ä–æ–µ–∫—Ç: ${project_path}${NC}"
    echo -e "${BLUE}üìù –õ–æ–≥–∏: ${LOG_FILE}${NC}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    if [ ! -d "$project_path" ]; then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $project_path${NC}"
        return 1
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ —á–µ—Ä–µ–∑ –¥–µ–º–æ–Ω
    cd "$SCRIPT_DIR"
    PYTHONPATH="$PYTHONPATH" nohup python3 run_server_daemon.py "$project_path" > "$LOG_FILE" 2>&1 &
    local server_pid=$!
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
    echo "$server_pid" > "$PID_FILE"
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    sleep 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if ps -p "$server_pid" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: $server_pid)${NC}"
        echo -e "${GREEN}üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: $0 status${NC}"
        echo -e "${GREEN}üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏: $0 logs${NC}"
        return 0
    else
        echo -e "${RED}‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è${NC}"
        echo -e "${RED}üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: $0 logs${NC}"
        rm -f "$PID_FILE"
        return 1
    fi
}

stop_server() {
    if ! is_server_running; then
        echo -e "${YELLOW}‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        return 1
    fi

    local pid=$(cat "$PID_FILE")
    echo -e "${BLUE}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ (PID: $pid)...${NC}"
    
    kill "$pid"
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    local count=0
    while ps -p "$pid" > /dev/null 2>&1 && [ $count -lt 10 ]; do
        sleep 1
        ((count++))
    done
    
    if ps -p "$pid" > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...${NC}"
        kill -9 "$pid"
        sleep 1
    fi
    
    rm -f "$PID_FILE"
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
}

restart_server() {
    local project_path="$1"
    echo -e "${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
    stop_server
    sleep 1
    start_server "$project_path"
}

show_status() {
    if is_server_running; then
        local pid=$(cat "$PID_FILE")
        local uptime=$(ps -o etime= -p "$pid" | tr -d ' ')
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω${NC}"
        echo -e "${GREEN}üÜî PID: $pid${NC}"
        echo -e "${GREEN}‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $uptime${NC}"
        echo -e "${GREEN}üìù –õ–æ–≥–∏: $LOG_FILE${NC}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤
        if [ -f "$LOG_FILE" ]; then
            echo -e "\n${BLUE}üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:${NC}"
            tail -5 "$LOG_FILE" | while read line; do
                echo -e "${BLUE}  $line${NC}"
            done
        fi
    else
        echo -e "${RED}‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        return 1
    fi
}

show_logs() {
    if [ -f "$LOG_FILE" ]; then
        echo -e "${BLUE}üìã –õ–æ–≥–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞:${NC}"
        echo -e "${BLUE}üìÅ –§–∞–π–ª: $LOG_FILE${NC}"
        echo -e "${BLUE}============================================================${NC}"
        tail -f "$LOG_FILE"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_FILE${NC}"
        return 1
    fi
}

run_tests() {
    echo -e "${BLUE}üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MCP —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
    cd "$SCRIPT_DIR"
    
    if command -v pytest &> /dev/null; then
        PYTHONPATH="$PYTHONPATH" pytest tests/ -v
    else
        echo -e "${RED}‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        echo -e "${YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest pytest-asyncio${NC}"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-}" in
    start)
        start_server "$2"
        ;;
    stop)
        stop_server
        ;;
    restart)
        restart_server "$2"
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    test)
        run_tests
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
