#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ DAP SDK
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö

set -e

CONTEXT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
PROJECT_ROOT="$(cd "$CONTEXT_DIR/.." && pwd)"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –°—á–µ—Ç—á–∏–∫–∏
TESTS_TOTAL=0
TESTS_PASSED=0
TESTS_FAILED=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
test_result() {
    local test_name="$1"
    local result="$2"
    local message="$3"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    if [[ "$result" == "PASS" ]]; then
        echo -e "${GREEN}‚úÖ PASS${NC}: $test_name"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        echo -e "${RED}‚ùå FAIL${NC}: $test_name"
        if [[ -n "$message" ]]; then
            echo -e "   ${YELLOW}‚Ü≥${NC} $message"
        fi
        TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
validate_json() {
    local file="$1"
    local test_name="JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: $(basename "$file")"
    
    if [[ ! -f "$file" ]]; then
        test_result "$test_name" "FAIL" "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    if command -v jq >/dev/null 2>&1; then
        if jq . "$file" >/dev/null 2>&1; then
            test_result "$test_name" "PASS"
            return 0
        else
            test_result "$test_name" "FAIL" "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"
            return 1
        fi
    else
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ jq
        if python3 -m json.tool "$file" >/dev/null 2>&1; then
            test_result "$test_name" "PASS"
            return 0
        else
            test_result "$test_name" "FAIL" "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ Python)"
            return 1
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
check_file_exists() {
    local file="$1"
    local test_name="–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: $(basename "$file")"
    
    if [[ -f "$file" ]]; then
        test_result "$test_name" "PASS"
        return 0
    else
        test_result "$test_name" "FAIL" "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
check_directory_structure() {
    local test_name="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫"
    local required_dirs=(
        "$CONTEXT_DIR"
        "$CONTEXT_DIR/scripts"
        "$CONTEXT_DIR/tests" 
        "$CONTEXT_DIR/.local"
        "$CONTEXT_DIR/.local/scripts"
        "$CONTEXT_DIR/.local/tests"
    )
    
    local missing_dirs=()
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            missing_dirs+=("$(basename "$dir")")
        fi
    done
    
    if [[ ${#missing_dirs[@]} -eq 0 ]]; then
        test_result "$test_name" "PASS"
        return 0
    else
        test_result "$test_name" "FAIL" "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–ø–∫–∏: ${missing_dirs[*]}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ gitignore
check_gitignore() {
    local test_name="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ .gitignore"
    local gitignore_file="$PROJECT_ROOT/.gitignore"
    
    if [[ ! -f "$gitignore_file" ]]; then
        test_result "$test_name" "FAIL" ".gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    if grep -q "context/.local/" "$gitignore_file"; then
        test_result "$test_name" "PASS"
        return 0
    else
        test_result "$test_name" "FAIL" "context/.local/ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
check_data_consistency() {
    local test_name="–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"
    local index_file="$CONTEXT_DIR/index.json"
    local local_context="$CONTEXT_DIR/.local/context.json"
    
    if [[ ! -f "$index_file" ]] || [[ ! -f "$local_context" ]]; then
        test_result "$test_name" "FAIL" "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ task_id –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å—É
    if command -v jq >/dev/null 2>&1; then
        local task_id_local=$(jq -r '.task.id' "$local_context" 2>/dev/null)
        local task_exists=$(jq -r ".tasks | has(\"$task_id_local\")" "$index_file" 2>/dev/null)
        
        if [[ "$task_exists" == "true" ]]; then
            test_result "$test_name" "PASS"
            return 0
        else
            test_result "$test_name" "FAIL" "task_id $task_id_local –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å–µ"
            return 1
        fi
    else
        test_result "$test_name" "PASS" "–ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç jq)"
        return 0
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üß™ DAP SDK Context Validation${NC}"
echo -e "${BLUE}üìÅ Context: $CONTEXT_DIR${NC}"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
    check_directory_structure
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    check_file_exists "$CONTEXT_DIR/index.json"
    check_file_exists "$CONTEXT_DIR/structure.json"
    check_file_exists "$CONTEXT_DIR/context.json"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    check_file_exists "$CONTEXT_DIR/.local/context.json"
    check_file_exists "$CONTEXT_DIR/.local/progress.json"
    check_file_exists "$CONTEXT_DIR/.local/index.json"
    
    # JSON –≤–∞–ª–∏–¥–∞—Ü–∏—è
    validate_json "$CONTEXT_DIR/index.json"
    validate_json "$CONTEXT_DIR/structure.json"
    validate_json "$CONTEXT_DIR/context.json"
    validate_json "$CONTEXT_DIR/.local/context.json"
    validate_json "$CONTEXT_DIR/.local/progress.json"
    validate_json "$CONTEXT_DIR/.local/index.json"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    check_gitignore
    check_data_consistency
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    echo ""
    echo -e "${BLUE}üìä Validation Results:${NC}"
    echo -e "   Total tests: $TESTS_TOTAL"
    echo -e "   ${GREEN}Passed: $TESTS_PASSED${NC}"
    echo -e "   ${RED}Failed: $TESTS_FAILED${NC}"
    
    if [[ $TESTS_FAILED -eq 0 ]]; then
        echo ""
        echo -e "${GREEN}üéâ All tests passed successfully!${NC}"
        echo -e "${GREEN}‚úÖ Context is configured correctly${NC}"
        exit 0
    else
        echo ""
        echo -e "${RED}‚ùå Configuration issues detected${NC}"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫
main "$@" 